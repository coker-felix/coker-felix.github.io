---
interface Props {
  title: string;
  description: string;
  technologies: Array<{
    name: string;
    category: string;
  }>;
}

const { title, description, technologies } = Astro.props;

// Group technologies by category
const groupedTechnologies = technologies.reduce((acc, tech) => {
  if (!acc[tech.category]) {
    acc[tech.category] = [];
  }
  acc[tech.category].push(tech);
  return acc;
}, {} as Record<string, typeof technologies>);
---

<article class="flex flex-col gap-8 p-6 rounded-lg bg-gradient-to-br from-neutral-900/50 to-neutral-800/30 border border-neutral-700/50 backdrop-blur-sm">
  <header class="flex w-full flex-col gap-2">
    <h3 class="text-xl font-semibold text-neutral-100 bg-gradient-to-r from-emerald-400 to-purple-400 bg-clip-text text-transparent">{title}</h3>
    <p class="text-neutral-400 leading-relaxed">{description}</p>
  </header>

  <section class="flex flex-col gap-6">
    {
      Object.entries(groupedTechnologies).map(([category, techs]) => (
        <div class="flex flex-col gap-3">
          <h4 class="text-sm font-medium text-neutral-300 uppercase tracking-wider border-b border-neutral-700/50 pb-2">
            {category}
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            {
              techs.map((tech) => (
                <span class="inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium bg-gradient-to-r from-neutral-800 to-neutral-700 text-neutral-200 border border-neutral-600/50 hover:border-emerald-500/50 hover:bg-gradient-to-r hover:from-emerald-900/20 hover:to-purple-900/20 hover:text-emerald-300 transition-all duration-300 shadow-sm hover:shadow-md hover:shadow-emerald-500/10">
                  {tech.name}
                </span>
              ))
            }
          </div>
        </div>
      ))
    }
  </section>
</article> 